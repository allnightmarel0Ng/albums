services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${KAFKA_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "${KAFKA_PORT}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "${REDIS_PORT_INCREMENTED}:${REDIS_PORT}"
    volumes:
      - albums-redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  postgres:
    build:
      context: ..
      dockerfile: deployments/postgres/Dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
    ports:
      - "${POSTGRES_PORT_INCREMENTED}:${POSTGRES_PORT}"
    volumes:
      - albums-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    
  init-postgres:
    image: postgres:13-alpine
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    entrypoint: [ "/bin/sh", "-c" ]
    command: |
      "
      psql -h postgres -U ${POSTGRES_USER} -d ${POSTGRES_DB} -f /migrations/ddl.sql
      psql -h postgres -U ${POSTGRES_USER} -d ${POSTGRES_DB} -f /migrations/dml.sql
      psql -h postgres -U ${POSTGRES_USER} -d ${POSTGRES_DB} -f /migrations/dal.sql
      "
    volumes:
      - ../migrations:/migrations

  authorization:
    container_name: authorization
    build:
      context: ..
      dockerfile: deployments/go/Dockerfile
      args:
        SERVICE_NAME: authorization
        SERVICE_PORT: ${AUTHORIZATION_PORT}
        EXPOSE_PORT: "true"
    ports:
      - "${AUTHORIZATION_PORT}:${AUTHORIZATION_PORT}"
    depends_on:
      postgres: 
        condition: service_healthy
      redis:
        condition: service_healthy
    init: true

  profile:
    container_name: profile
    build:
      context: ..
      dockerfile: deployments/go/Dockerfile
      args:
        SERVICE_NAME: profile
        SERVICE_PORT: ${PROFILE_PORT}
        EXPOSE_PORT: "true"
    ports:
      - "${PROFILE_PORT}:${PROFILE_PORT}"
    depends_on:
      postgres: 
        condition: service_healthy
    init: true
  
  order-management:
    container_name: order-management
    build:
      context: ..
      dockerfile: deployments/go/Dockerfile
      args:
        SERVICE_NAME: order-management
        SERVICE_PORT: ${ORDER_MANAGEMENT_PORT}
        EXPOSE_PORT: "true"
    ports:
      - "${ORDER_MANAGEMENT_PORT}:${ORDER_MANAGEMENT_PORT}"
    depends_on:
      postgres: 
        condition: service_healthy
    init: true

  money-operations:
    container_name: money-management
    build:
      context: ..
      dockerfile: deployments/go/Dockerfile
      args:
        SERVICE_NAME: order-management
        EXPOSE_PORT: "false"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy

  gateway:
    container_name: gateway
    build:
      context: ..
      dockerfile: deployments/go/Dockerfile
      args:
        SERVICE_NAME: gateway
        SERVICE_PORT: ${GATEWAY_PORT}
        EXPOSE_PORT: "true"
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    depends_on:
      - authorization
      - postgres
      - order-management
      - money-operations
    init: true
    
volumes:
  albums-data:
  albums-redis-data: